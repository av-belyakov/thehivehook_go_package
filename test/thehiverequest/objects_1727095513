
2024/09/23 14:13:54 	---------------
"source": "gcm"
event:
  details:
    "impactStatus": "WithImpact"
    "endDate": 1727090032834
    "resolutionStatus": "TruePositive"
    "summary": "ТМРКИ проведены"
    "status": "Resolved"
  "objectType": "case"
  "startDate": 1727090033011
  "rootId": "~86676517008"
  "organisation": "GCM"
  "operation": "update"
  "base": true
  "requestId": "41366ddba08e7639:-31c56353:192160237c7:-8000:306904"
  object:
    "updatedAt": 1727090033005
    "title": "Признаки функционирования ВПО в ЗАО «НПК ПУСК»"
    "startDate": 1711632060000
    "owner": "sds@cert.gov.ru"
    "id": "~86676517008"
    "_type": "case"
    tags:
      1. "Job"
      2. "IRM"
    "pap": 2
    "status": "Resolved"
    customFields:
    "updatedBy": "i.panov@cloud.gcm"
    "caseId": 35144
    "description": "Получена информация о признаках заражения ВПО ЗАО «НПК ПУСК»."
    "severity": 2
    "impactStatus": "WithImpact"
    "resolutionStatus": "TruePositive"
    "flag": false
    "tlp": 3
    "_id": "~86676517008"
    permissions:
    stats:
    "createdAt": 1711632128865
    "endDate": 1727090032834
    "summary": "ТМРКИ проведены"
    "createdBy": "sds@cert.gov.ru"
  "organisationId": "~4192"
  "objectId": "~86676517008"
observables:
  1.
    "_createdBy": "sds@cert.gov.ru"
    "dataType": "ip_home"
    "ioc": false
    "tlp": 2
    "_id": "~85283905592"
    "message": ""
    "sighted": false
    "_createdAt": 1711633372003
    "_type": "Observable"
    "data": "81.23.119.178"
    extraData:
    "ignoreSimilarity": false
    reports:
    "startDate": 1711633372003
    tags:
      1. "IP_HOME"
  2.
    "sighted": false
    "startDate": 1726490693542
    tags:
      1. "misp:Payload delivery="pehash""
    "data": "7BB703477BBB68C692D52B57F77EA27D5A8CE4A1A87711E2B9954F2F1F2C1157"
    "ignoreSimilarity": false
    "ioc": true
    "_createdAt": 1726490693542
    "_id": "~88966643792"
    "dataType": "hash"
    "_createdBy": "i.balanin@cloud.gcm"
    extraData:
    "tlp": 2
    "_type": "Observable"
    "message": ""
    reports:
  3.
    "ignoreSimilarity": false
    "ioc": true
    tags:
      1. "misp:Payload delivery="pehash""
    "tlp": 2
    "_createdBy": "i.balanin@cloud.gcm"
    "_type": "Observable"
    "data": "4C76C10579F0A08E16B921160E55FE56126C8B220FD5F9C5CB5E9CECA66E9585"
    "dataType": "hash"
    extraData:
    reports:
    "message": ""
    "sighted": false
    "startDate": 1726490693335
    "_createdAt": 1726490693335
    "_id": "~85689741504"
  4.
    "dataType": "hash"
    "ignoreSimilarity": false
    "tlp": 2
    "_createdBy": "i.balanin@cloud.gcm"
    reports:
    "ioc": true
    "message": ""
    "sighted": false
    "startDate": 1726490693134
    tags:
      1. "misp:Payload delivery="pehash""
    "_createdAt": 1726490693134
    "_id": "~88761819136"
    extraData:
    "_type": "Observable"
    "data": "0AFB2DA5BEEEFA1C542299CAEBB7F0C1C5741F155F3229D53B36034F519CFB65"
  5.
    "_type": "Observable"
    "dataType": "domain"
    extraData:
    "message": ""
    "tlp": 2
    "_createdBy": "sds@cert.gov.ru"
    "ioc": true
    "sighted": false
    "_createdAt": 1711633481745
    "data": "ticketsbrand[.]com"
    reports:
    "startDate": 1711633481745
    tags:
      1. "Malware"
    "_id": "~86108418128"
    "ignoreSimilarity": false
  6.
    "_createdBy": "i.balanin@cloud.gcm"
    "_type": "Observable"
    "startDate": 1726746436768
    tags:
      1. "misp:Payload delivery="pehash""
    "_id": "~87740154032"
    "data": "4d59d8819e9d4b0c00afee7b3a8f835ba34cb7b4"
    "ignoreSimilarity": false
    "_createdAt": 1726746436768
    "sighted": false
    "tlp": 2
    "dataType": "hash"
    extraData:
    "ioc": true
    "message": ""
    reports:
  7.
    "message": ""
    "_createdAt": 1726746436598
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~92040855600"
    "ioc": true
    "data": "7772d7b4a94583559efdb0166f0ed08a758aed38"
    extraData:
    "ignoreSimilarity": false
    "dataType": "hash"
    tags:
      1. "misp:Payload delivery="pehash""
    "tlp": 2
    "_type": "Observable"
    reports:
    "sighted": false
    "startDate": 1726746436598
  8.
    "ioc": true
    "message": ""
    reports:
    tags:
      1. "misp:Payload delivery="pehash""
    "tlp": 2
    "_id": "~87740158128"
    extraData:
    "startDate": 1726746437361
    "_type": "Observable"
    "data": "d018e19c0004e9a0b0fac469792994a3003a99de"
    "dataType": "hash"
    "ignoreSimilarity": false
    "sighted": false
    "_createdAt": 1726746437361
    "_createdBy": "i.balanin@cloud.gcm"
  9.
    "data": "677bdb961f0de9cf0ed85e7a6ff09d05e1ba26d3"
    "ioc": true
    "message": ""
    "sighted": false
    "_createdAt": 1726746437544
    "_type": "Observable"
    extraData:
    reports:
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~87740162224"
    "ignoreSimilarity": false
    "tlp": 2
    "dataType": "hash"
    "startDate": 1726746437544
    tags:
      1. "misp:Payload delivery="pehash""
  10.
    "dataType": "hash"
    "startDate": 1726746437165
    "message": ""
    reports:
    tags:
      1. "misp:Payload delivery="pehash""
    "tlp": 2
    "_createdAt": 1726746437165
    "_createdBy": "i.balanin@cloud.gcm"
    "_type": "Observable"
    "ioc": true
    "_id": "~90279596040"
    "ignoreSimilarity": false
    "data": "bd05e0a05813455d03eb2190115811f102234702"
    extraData:
    "sighted": false
  11.
    "_createdAt": 1726746436965
    "_id": "~90279591944"
    "ioc": true
    "sighted": false
    "startDate": 1726746436965
    "_createdBy": "i.balanin@cloud.gcm"
    "ignoreSimilarity": false
    "message": ""
    "tlp": 2
    "_type": "Observable"
    extraData:
    reports:
    tags:
      1. "misp:Payload delivery="pehash""
    "data": "6194300b5a4e80a6733d5f7e93d238a96572f519"
    "dataType": "hash"
  12.
    "_createdAt": 1711633423337
    "startDate": 1711633423337
    tags:
      1. "Malware"
    "_createdBy": "sds@cert.gov.ru"
    "data": "45.152.115[.]157"
    "ignoreSimilarity": false
    reports:
    "tlp": 2
    "_id": "~86676848784"
    extraData:
    "message": ""
    "sighted": false
    "_type": "Observable"
    "dataType": "ip"
    "ioc": true
  13.
    reports:
    "_type": "Observable"
    "dataType": "domain"
    extraData:
    "ignoreSimilarity": false
    "ioc": true
    "data": "allclassicstore.com"
    "sighted": false
    "_createdAt": 1726490903005
    "_createdBy": "i.balanin@cloud.gcm"
    "startDate": 1726490903005
    "tlp": 2
    "_id": "~83887521808"
    "message": ""
    tags:
      1. "misp:Payload delivery="domain""
  14.
    "_type": "Observable"
    tags:
      1. "misp:Payload delivery="domain""
    "_createdAt": 1726490761681
    extraData:
    "ioc": true
    reports:
    "sighted": false
    "data": "techame.com"
    "startDate": 1726490761681
    "tlp": 2
    "_createdBy": "i.balanin@cloud.gcm"
    "dataType": "domain"
    "ignoreSimilarity": false
    "message": ""
    "_id": "~90072432872"
  15.
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~91874697264"
    "startDate": 1726491007949
    "_createdAt": 1726491007949
    "ioc": true
    "message": ""
    "_type": "Observable"
    extraData:
    "ignoreSimilarity": false
    "sighted": false
    "tlp": 2
    "dataType": "ip"
    reports:
    tags:
      1. "misp:Network activity="ip-dst""
    "data": "172.86.70.138"
ttp:
  1.
    "_createdAt": 1726491146000
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~83887558672"
    extraData:
      pattern:
        defenseBypassed:
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.

Adversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) 

While [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534)."
        "patternId": "T1204.002"
        "patternType": "attack-pattern"
        "version": "1.2"
        "_id": "~877850672"
        "_type": "Pattern"
        extraData:
        permissionsRequired:
        tactics:
          1. "execution"
        "url": "https://attack.mitre.org/techniques/T1204/002"
        "_createdAt": 1616761475931
        dataSources:
          1. "Process: Process Creation"
          2. "File: File Creation"
        "name": "Malicious File"
        "revoked": false
        systemRequirements:
        "_createdBy": "architector@33c.rcm"
        "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.

Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe)."
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
        "remoteSupport": false
      patternParent:
        "_type": "Pattern"
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).

While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).

Adversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary, or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204). For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)"
        "name": "User Execution"
        "patternId": "T1204"
        "remoteSupport": false
        systemRequirements:
        "url": "https://attack.mitre.org/techniques/T1204"
        "_id": "~468336640"
        extraData:
        "patternType": "attack-pattern"
        "revoked": false
        "version": "1.5"
        "_createdAt": 1616761469119
        dataSources:
          1. "Container: Container Creation"
          2. "Network Traffic: Network Connection Creation"
          3. "Container: Container Start"
          4. "Instance: Instance Creation"
          5. "Instance: Instance Start"
          6. "Image: Image Creation"
          7. "Process: Process Creation"
          8. "Network Traffic: Network Traffic Content"
          9. "Command: Command Execution"
          10. "Application Log: Application Log Content"
          11. "File: File Creation"
        "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.

Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe)."
        "_createdBy": "architector@33c.rcm"
        defenseBypassed:
        permissionsRequired:
        platforms:
          1. "Linux"
          2. "Windows"
          3. "macOS"
          4. "IaaS"
          5. "Containers"
        tactics:
          1. "execution"
    "occurDate": 1726491060000
    "patternId": "T1204.002"
    "tactic": "execution"
  2.
    "tactic": "defense-evasion"
    "_createdAt": 1726491306905
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~85689835712"
    extraData:
      pattern:
        dataSources:
          1. "Process: Process Creation"
          2. "File: File Modification"
          3. "Script: Script Execution"
        permissionsRequired:
        tactics:
          1. "defense-evasion"
        "_createdBy": "architector@33c.rcm"
        "description": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.

One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)

Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)"
        "detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](https://attack.mitre.org/software/S0160).

Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior."
        "revoked": false
        systemRequirements:
        "_id": "~468299808"
        "_type": "Pattern"
        defenseBypassed:
          1. "Anti-virus"
          2. "Host Intrusion Prevention Systems"
          3. "Signature-based Detection"
          4. "Network Intrusion Detection System"
        extraData:
        "name": "Deobfuscate/Decode Files or Information"
        "patternId": "T1140"
        "patternType": "attack-pattern"
        "url": "https://attack.mitre.org/techniques/T1140"
        "_createdAt": 1616761465601
        "version": "1.1"
        "remoteSupport": false
        platforms:
          1. "Windows"
          2. "Linux"
          3. "macOS"
    "occurDate": 1726491240000
    "patternId": "T1140"
  3.
    extraData:
      pattern:
        "_createdAt": 1670314360384
        defenseBypassed:
        platforms:
          1. "macOS"
          2. "Windows"
          3. "Linux"
        "remoteSupport": false
        "_createdBy": "architector@33c.rcm"
        "_id": "~42558079088"
        "detection": ""
        extraData:
        "patternId": "T1027.009"
        permissionsRequired:
        "version": "1.0"
        "description": "Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs) 

Adversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) 

For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021) 

Embedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT)"
        "name": "Embedded Payloads"
        "patternType": "attack-pattern"
        tactics:
          1. "defense-evasion"
        "_type": "Pattern"
        dataSources:
          1. "File: File Metadata"
          2. "File: File Creation"
        "revoked": false
        systemRequirements:
          1. "User"
        "url": "https://attack.mitre.org/techniques/T1027/009"
      patternParent:
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. 

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. 

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) "
        "revoked": false
        systemRequirements:
        "url": "https://attack.mitre.org/techniques/T1027"
        "version": "1.3"
        "_createdBy": "architector@33c.rcm"
        "capecId": "CAPEC-267"
        dataSources:
          1. "Process: OS API Execution"
          2. "Command: Command Execution"
          3. "File: File Creation"
          4. "Module: Module Load"
          5. "Process: Process Creation"
          6. "File: File Metadata"
        "name": "Obfuscated Files or Information"
        "remoteSupport": false
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
        "_type": "Pattern"
        "capecUrl": "https://capec.mitre.org/data/definitions/267.html"
        "patternId": "T1027"
        "patternType": "attack-pattern"
        permissionsRequired:
        tactics:
          1. "defense-evasion"
        "_createdAt": 1616761467258
        "_id": "~632664256"
        defenseBypassed:
          1. "Host Forensic Analysis"
          2. "Signature-based Detection"
          3. "Host Intrusion Prevention Systems"
          4. "Application Control"
          5. "Log Analysis"
        "detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). 

Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) 

Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. 

The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. "
        extraData:
    "occurDate": 1726491300000
    "patternId": "T1027.009"
    "tactic": "defense-evasion"
    "_createdAt": 1726491329948
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~85689852096"
  4.
    "tactic": "execution"
    "_createdAt": 1726491199641
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~86959673512"
    extraData:
      pattern:
        permissionsRequired:
          1. "User"
        tactics:
          1. "execution"
        "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)

Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.

Adversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel."
        "name": "Windows Command Shell"
        "revoked": false
        "_createdBy": "architector@33c.rcm"
        "_type": "Pattern"
        "patternType": "attack-pattern"
        platforms:
          1. "Windows"
        "remoteSupport": true
        "_createdAt": 1616761481669
        defenseBypassed:
        "detection": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.

Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script."
        extraData:
        "patternId": "T1059.003"
        systemRequirements:
        "url": "https://attack.mitre.org/techniques/T1059/003"
        "version": "1.2"
        "_id": "~468545568"
        dataSources:
          1. "Process: Process Creation"
          2. "Command: Command Execution"
      patternParent:
        "_createdAt": 1616761465124
        "detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.

If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.

Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script."
        "patternId": "T1059"
        permissionsRequired:
        "revoked": false
        "_id": "~837173288"
        defenseBypassed:
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)"
        "name": "Command and Scripting Interpreter"
        "remoteSupport": true
        systemRequirements:
        "version": "2.3"
        extraData:
        "patternType": "attack-pattern"
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
          4. "Network"
        "url": "https://attack.mitre.org/techniques/T1059"
        "_createdBy": "architector@33c.rcm"
        "_type": "Pattern"
        dataSources:
          1. "Process: Process Creation"
          2. "Module: Module Load"
          3. "Process: Process Metadata"
          4. "Script: Script Execution"
          5. "Command: Command Execution"
        tactics:
          1. "execution"
    "occurDate": 1726491180000
    "patternId": "T1059.003"
  5.
    "_id": "~86959685800"
    extraData:
      pattern:
        "url": "https://attack.mitre.org/techniques/T1059/005"
        "version": "1.3"
        dataSources:
          1. "Process: Process Creation"
          2. "Module: Module Load"
          3. "Script: Script Execution"
          4. "Command: Command Execution"
        "name": "Visual Basic"
        platforms:
          1. "Windows"
          2. "macOS"
          3. "Linux"
        "remoteSupport": false
        "_createdAt": 1616761481260
        "_createdBy": "architector@33c.rcm"
        "detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](https://attack.mitre.org/tactics/TA0007), [Collection](https://attack.mitre.org/tactics/TA0009), or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.

Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent."
        systemRequirements:
        "revoked": false
        tactics:
          1. "execution"
        "_id": "~714186904"
        "_type": "Pattern"
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)

Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)

Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )"
        "patternType": "attack-pattern"
        defenseBypassed:
        extraData:
        "patternId": "T1059.005"
        permissionsRequired:
          1. "User"
          2. "Administrator"
          3. "SYSTEM"
      patternParent:
        "patternType": "attack-pattern"
        "remoteSupport": true
        "revoked": false
        systemRequirements:
        "_createdBy": "architector@33c.rcm"
        "name": "Command and Scripting Interpreter"
        defenseBypassed:
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)"
        extraData:
        "version": "2.3"
        "_createdAt": 1616761465124
        dataSources:
          1. "Process: Process Creation"
          2. "Module: Module Load"
          3. "Process: Process Metadata"
          4. "Script: Script Execution"
          5. "Command: Command Execution"
        "patternId": "T1059"
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
          4. "Network"
        "_type": "Pattern"
        "detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.

If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.

Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script."
        tactics:
          1. "execution"
        "url": "https://attack.mitre.org/techniques/T1059"
        "_id": "~837173288"
        permissionsRequired:
    "occurDate": 1726491180000
    "patternId": "T1059.005"
    "tactic": "execution"
    "_createdAt": 1726491214671
    "_createdBy": "i.balanin@cloud.gcm"
  6.
    "_id": "~87655805000"
    extraData:
      pattern:
        extraData:
        platforms:
          1. "Windows"
        "remoteSupport": true
        "version": "1.2"
        "_createdAt": 1616761477682
        "_id": "~837398568"
        defenseBypassed:
        "patternType": "attack-pattern"
        permissionsRequired:
        "revoked": false
        "detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.

Monitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)

It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.(Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.

Consider monitoring for Windows event ID (EID) 400, which shows the version of PowerShell executing in the <code>EngineVersion</code> field (which may also be relevant to detecting a potential [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)) as well as if PowerShell is running locally or remotely in the <code>HostName</code> field. Furthermore, EID 400 may indicate the start time and EID 403 indicates the end time of a PowerShell session.(Citation: inv_ps_attacks)"
        "patternId": "T1059.001"
        "_createdBy": "architector@33c.rcm"
        "_type": "Pattern"
        dataSources:
          1. "Script: Script Execution"
          2. "Command: Command Execution"
          3. "Process: Process Metadata"
          4. "Process: Process Creation"
          5. "Module: Module Load"
        tactics:
          1. "execution"
        "url": "https://attack.mitre.org/techniques/T1059/001"
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).

PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.

A number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)

PowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)"
        "name": "PowerShell"
        systemRequirements:
      patternParent:
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)"
        extraData:
        "patternType": "attack-pattern"
        "remoteSupport": true
        "revoked": false
        tactics:
          1. "execution"
        "_createdBy": "architector@33c.rcm"
        "_type": "Pattern"
        "url": "https://attack.mitre.org/techniques/T1059"
        "detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.

If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.

Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script."
        "_createdAt": 1616761465124
        "_id": "~837173288"
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
          4. "Network"
        "version": "2.3"
        dataSources:
          1. "Process: Process Creation"
          2. "Module: Module Load"
          3. "Process: Process Metadata"
          4. "Script: Script Execution"
          5. "Command: Command Execution"
        "name": "Command and Scripting Interpreter"
        permissionsRequired:
        systemRequirements:
        defenseBypassed:
        "patternId": "T1059"
    "occurDate": 1726491120000
    "patternId": "T1059.001"
    "tactic": "execution"
    "_createdAt": 1726491176780
    "_createdBy": "i.balanin@cloud.gcm"
  7.
    "_createdAt": 1726491373976
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~88761937920"
    extraData:
      pattern:
        "detection": "### Windows
Monitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as [Mimikatz](https://attack.mitre.org/software/S0002) access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential indicators of malicious activity.

Hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised [Valid Accounts](https://attack.mitre.org/techniques/T1078) in-use by adversaries may help as well. 

On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.

Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like [Mimikatz](https://attack.mitre.org/software/S0002). [PowerShell](https://attack.mitre.org/techniques/T1059/001) scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, (Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.

Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Note: Domain controllers may not log replication requests originating from the default domain controller account. (Citation: Harmj0y DCSync Sept 2015). Also monitor for network protocols  (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests (Citation: Microsoft SAMR) from IPs not associated with known domain controllers. (Citation: AdSecurity DCSync Sept 2015)

### Linux
To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path <code>/proc/<pid>/maps</code>, where the <code><pid></code> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs."
        "patternId": "T1003"
        "url": "https://attack.mitre.org/techniques/T1003"
        "revoked": false
        "version": "2.1"
        "_createdAt": 1616761467238
        "_createdBy": "architector@33c.rcm"
        "_type": "Pattern"
        permissionsRequired:
          1. "Administrator"
          2. "SYSTEM"
          3. "root"
        "remoteSupport": false
        platforms:
          1. "Windows"
          2. "Linux"
          3. "macOS"
        dataSources:
          1. "Network Traffic: Network Traffic Flow"
          2. "Windows Registry: Windows Registry Key Access"
          3. "Network Traffic: Network Traffic Content"
          4. "Process: Process Access"
          5. "Command: Command Execution"
          6. "Process: OS API Execution"
          7. "Active Directory: Active Directory Object Access"
          8. "Process: Process Creation"
          9. "File: File Access"
        defenseBypassed:
        extraData:
        "name": "OS Credential Dumping"
        "patternType": "attack-pattern"
        "_id": "~468291584"
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.

Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.
"
        systemRequirements:
        tactics:
          1. "credential-access"
    "occurDate": 1726491300000
    "patternId": "T1003"
    "tactic": "credential-access"
  8.
    "_createdAt": 1726491283577
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~88966746192"
    extraData:
      pattern:
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.

Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. 

Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as "Bring Your Own Vulnerable Driver" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)

Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component)."
        extraData:
        "patternId": "T1543.003"
        permissionsRequired:
        systemRequirements:
        "_type": "Pattern"
        defenseBypassed:
        "remoteSupport": false
        tactics:
          1. "persistence"
          2. "privilege-escalation"
        "version": "1.2"
        "_id": "~877940784"
        "capecId": "CAPEC-478"
        "capecUrl": "https://capec.mitre.org/data/definitions/478.html"
        platforms:
          1. "Windows"
        "url": "https://attack.mitre.org/techniques/T1543/003"
        "_createdAt": 1616761481854
        "_createdBy": "architector@33c.rcm"
        dataSources:
          1. "Windows Registry: Windows Registry Key Modification"
          2. "Driver: Driver Load"
          3. "Service: Service Modification"
          4. "Windows Registry: Windows Registry Key Creation"
          5. "Process: OS API Execution"
          6. "Command: Command Execution"
          7. "Process: Process Creation"
          8. "Service: Service Creation"
        "detection": "Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  

Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at <code>HKLM\SYSTEM\CurrentControlSet\Services</code>. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.(Citation: TechNet Autoruns)  

Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 (Citation: Microsoft 4697 APR 2017)(Citation: Microsoft Windows Event Forwarding FEB 2018)). New, benign services may be created during installation of new software.

Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement."
        "name": "Windows Service"
        "patternType": "attack-pattern"
        "revoked": false
      patternParent:
        tactics:
          1. "persistence"
          2. "privilege-escalation"
        "url": "https://attack.mitre.org/techniques/T1543"
        "version": "1.1"
        "patternId": "T1543"
        "patternType": "attack-pattern"
        "_type": "Pattern"
        dataSources:
          1. "Process: Process Creation"
          2. "Windows Registry: Windows Registry Key Creation"
          3. "Windows Registry: Windows Registry Key Modification"
          4. "File: File Modification"
          5. "Driver: Driver Load"
          6. "Process: OS API Execution"
          7. "File: File Creation"
          8. "Service: Service Modification"
          9. "Command: Command Execution"
          10. "Service: Service Creation"
        platforms:
          1. "Windows"
          2. "macOS"
          3. "Linux"
        "remoteSupport": false
        "revoked": false
        "_createdBy": "architector@33c.rcm"
        "_id": "~672846056"
        "name": "Create or Modify System Process"
        permissionsRequired:
        "_createdAt": 1616761465306
        extraData:
        "detection": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  

Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. 

Monitor for changes to files associated with system-level processes."
        systemRequirements:
        defenseBypassed:
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) 

Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  

Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)  "
    "occurDate": 1726491240000
    "patternId": "T1543.003"
    "tactic": "persistence"
  9.
    "tactic": "discovery"
    "_createdAt": 1726491393410
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~88966787152"
    extraData:
      pattern:
        "_createdAt": 1616761472499
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).
"
        "patternType": "attack-pattern"
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
        "remoteSupport": false
        "revoked": false
        extraData:
        permissionsRequired:
        "_createdBy": "architector@33c.rcm"
        "_id": "~632512712"
        "_type": "Pattern"
        "capecId": "CAPEC-575"
        dataSources:
          1. "Command: Command Execution"
          2. "Process: Process Creation"
          3. "Network Traffic: Network Traffic Content"
          4. "Group: Group Enumeration"
          5. "Process: OS API Execution"
        defenseBypassed:
        systemRequirements:
        "url": "https://attack.mitre.org/techniques/T1087/002"
        "capecUrl": "https://capec.mitre.org/data/definitions/575.html"
        "name": "Domain Account"
        tactics:
          1. "discovery"
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.

Commands such as <code>net user /domain</code> and <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups."
        "patternId": "T1087.002"
        "version": "1.1"
      patternParent:
        tactics:
          1. "discovery"
        "_type": "Pattern"
        dataSources:
          1. "File: File Access"
          2. "Command: Command Execution"
          3. "Process: Process Creation"
        extraData:
        systemRequirements:
        platforms:
          1. "Windows"
          2. "Azure AD"
          3. "Office 365"
          4. "SaaS"
          5. "IaaS"
          6. "Linux"
          7. "macOS"
          8. "Google Workspace"
        "revoked": false
        "version": "2.3"
        "capecUrl": "https://capec.mitre.org/data/definitions/575.html"
        "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior."
        "name": "Account Discovery"
        "patternType": "attack-pattern"
        "_createdAt": 1616761464596
        "_createdBy": "architector@33c.rcm"
        "patternId": "T1087"
        permissionsRequired:
          1. "User"
        "remoteSupport": false
        "url": "https://attack.mitre.org/techniques/T1087"
        "_id": "~713916568"
        "capecId": "CAPEC-575"
        defenseBypassed:
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

Monitor for processes that can be used to enumerate user accounts, such as <code>net.exe</code> and <code>net1.exe</code>, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)"
    "occurDate": 1726491360000
    "patternId": "T1087.002"
  10.
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~90072477928"
    extraData:
      pattern:
        "detection": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time.

Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle."
        "name": "Malware"
        permissionsRequired:
        "revoked": false
        tactics:
          1. "resource-development"
        "_createdAt": 1616761475997
        "_id": "~468463648"
        dataSources:
          1. "Malware Repository: Malware Content"
          2. "Malware Repository: Malware Metadata"
        defenseBypassed:
        platforms:
          1. "PRE"
        "remoteSupport": false
        systemRequirements:
        "version": "1.2"
        "_createdBy": "architector@33c.rcm"
        "url": "https://attack.mitre.org/techniques/T1587/001"
        "description": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)

As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.

Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation: FireEye APT29)"
        extraData:
        "patternId": "T1587.001"
        "patternType": "attack-pattern"
        "_type": "Pattern"
      patternParent:
        "url": "https://attack.mitre.org/techniques/T1587"
        "version": "1.1"
        "_createdAt": 1616761465612
        "name": "Develop Capabilities"
        permissionsRequired:
        "remoteSupport": false
        "revoked": false
        "_createdBy": "architector@33c.rcm"
        "_id": "~713941144"
        platforms:
          1. "PRE"
        "_type": "Pattern"
        "description": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: Bitdefender StrongPity June 2020)(Citation: Talos Promethium June 2020)

As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability."
        "detection": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time.

Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.(Citation: Splunk Kovar Certificates 2017)

Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
        tactics:
          1. "resource-development"
        systemRequirements:
        dataSources:
          1. "Internet Scan: Response Content"
          2. "Malware Repository: Malware Metadata"
          3. "Malware Repository: Malware Content"
        defenseBypassed:
        extraData:
        "patternId": "T1587"
        "patternType": "attack-pattern"
    "occurDate": 1726491000000
    "patternId": "T1587.001"
    "tactic": "resource-development"
    "_createdAt": 1726491090183
  11.
    "tactic": "initial-access"
    "_createdAt": 1726491118013
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~91874717744"
    extraData:
      pattern:
        dataSources:
          1. "Application Log: Application Log Content"
          2. "File: File Creation"
          3. "Network Traffic: Network Traffic Content"
          4. "Network Traffic: Network Traffic Flow"
        "detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.

Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)

Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203) or usage of malicious scripts.

Monitor for suspicious descendant process spawning from Microsoft Office and other productivity software.(Citation: Elastic - Koadiac Detection with EQL)"
        "name": "Spearphishing Attachment"
        "version": "2.2"
        "_createdBy": "architector@33c.rcm"
        "_id": "~714158232"
        "capecId": "CAPEC-163"
        "remoteSupport": false
        "_type": "Pattern"
        extraData:
        "patternId": "T1566.001"
        permissionsRequired:
        platforms:
          1. "macOS"
          2. "Windows"
          3. "Linux"
        "revoked": false
        tactics:
          1. "initial-access"
        "_createdAt": 1616761479825
        "capecUrl": "https://capec.mitre.org/data/definitions/163.html"
        defenseBypassed:
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.

There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. "
        "patternType": "attack-pattern"
        systemRequirements:
        "url": "https://attack.mitre.org/techniques/T1566/001"
      patternParent:
        "name": "Phishing"
        "patternId": "T1566"
        "version": "2.2"
        defenseBypassed:
        "detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.

Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)

URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.

Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.

Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once [User Execution](https://attack.mitre.org/techniques/T1204) occurs."
        "_type": "Pattern"
        "capecId": "CAPEC-98"
        "capecUrl": "https://capec.mitre.org/data/definitions/98.html"
        extraData:
        platforms:
          1. "Linux"
          2. "macOS"
          3. "Windows"
          4. "SaaS"
          5. "Office 365"
          6. "Google Workspace"
        "remoteSupport": false
        "_createdBy": "architector@33c.rcm"
        "_id": "~877719600"
        "url": "https://attack.mitre.org/techniques/T1566"
        systemRequirements:
        tactics:
          1. "initial-access"
        permissionsRequired:
        "revoked": false
        dataSources:
          1. "File: File Creation"
          2. "Network Traffic: Network Traffic Content"
          3. "Network Traffic: Network Traffic Flow"
          4. "Application Log: Application Log Content"
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.

Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source."
        "_createdAt": 1616761467401
        "patternType": "attack-pattern"
    "occurDate": 1726491060000
    "patternId": "T1566.001"
  12.
    "_createdAt": 1726491409118
    "_createdBy": "i.balanin@cloud.gcm"
    "_id": "~91874832432"
    extraData:
    "occurDate": 1726491360000
    "patternId": "T1615"
    "tactic": "discovery"
