variables:
  BRANCH_MAJOR: master
  BRANCH_TEST: dev_branch_testing

stages:
  - sync
  - build
  - deploy

default:
  tags:
    - thehivehook_go

.docker-login-script: &docker-login
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

.change-readme-never-commit: &readme-no-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_MAJOR || $CI_COMMIT_BRANCH == $BRANCH_TEST
    changes:
      - README.md
    when: never

.change-readme-commit: &readme-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_MAJOR || $CI_COMMIT_BRANCH == $BRANCH_TEST
    changes:
      - README.md
    when: on_success

.change-docker-compose-never-commit: &docker-compose-no-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_MAJOR || $CI_COMMIT_BRANCH == $BRANCH_TEST
    changes:
      - docker-compose.yml
    when: never

.change-docker-compose-commit: &docker-compose-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_MAJOR || $CI_COMMIT_BRANCH == $BRANCH_TEST
    changes:
      - docker-compose.yml
    when: on_success

.is-branch-dev-test-commit: &dev-test-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_TEST || $CI_COMMIT_REF_NAME == $BRANCH_TEST

.is-branch-master-commit: &master-commit
  - if: $CI_COMMIT_BRANCH == $BRANCH_MAJOR || $CI_COMMIT_REF_NAME == $BRANCH_MAJOR

# 
#.is-merge-with-branch-testing: &merge-with-branch-testing
#  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#    changes: #Такое описание changes будет работать только начиная с версии 15.5
#      paths: 
#        - '**/*'
#      compare_to: 
#        - 'refs/heads/$BRANCH_TEST'
#    when: on_success
#
#.is-merge-with-master: &merge-with-master
#  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#    changes:
#      paths:
#        - '**/*'
#      compare_to: 
#        - 'refs/heads/$BRANCH_MAJOR'
#    when: on_success
#

#синхронизируем файл README.md
sync-file-readme:
  stage: sync
  rules:
    - *readme-commit
  script:
    #Главный центр мониторинга
    - 'curl -v --request PUT --header PRIVATE-TOKEN:$GCM_SYNC_FILES_TOKEN -F branch=master -F author_email=nobody@mail.org -F author_name=auto_sync -F commit_message="Update README.md" -F content="< $CI_PROJECT_DIR/README.md" http://gitlab.cloud.gcm/api/v4/projects/726/repository/files/README.md'
    #РЦМ Санкт-Петербург
    - 'curl -v --request PUT --header PRIVATE-TOKEN:$RCMSPB_SYNC_FILES_TOKEN -F branch=master -F author_email=nobody@mail.org -F author_name=auto_sync -F commit_message="Update README.md" -F content="< $CI_PROJECT_DIR/README.md" http://gitlab.cloud.gcm/api/v4/projects/748/repository/files/README.md'

#синхронизируем файл docker-compose.yml
sync-file-docker-compose:
  stage: sync
  rules:
    - *docker-compose-commit
  script:
    #Главный центр мониторинга
    - 'curl -v --request PUT --header PRIVATE-TOKEN:$GCM_SYNC_FILES_TOKEN -F branch=master -F author_email=nobody@mail.org -F author_name=auto_sync -F commit_message="Update docker-compose.yml" -F content="< $CI_PROJECT_DIR/docker-compose.yml" http://gitlab.cloud.gcm/api/v4/projects/726/repository/files/docker-compose.yml'
    #РЦМ Санкт-Петербург
    - 'curl -v --request PUT --header PRIVATE-TOKEN:$RCMSPB_SYNC_FILES_TOKEN -F branch=master -F author_email=nobody@mail.org -F author_name=auto_sync -F commit_message="Update docker-compose.yml" -F content="< $CI_PROJECT_DIR/docker-compose.rcm.yml" http://gitlab.cloud.gcm/api/v4/projects/748/repository/files/docker-compose.yml'

#сборка тестового образа
build-test:
  stage: build
  rules:
    - *readme-no-commit
    - *docker-compose-no-commit
    - *dev-test-commit
    #- *merge-with-branch-testing
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --build-arg VERSION=$CI_COMMIT_SHORT_SHA .
    # удаляем промежуточный образ с меткой temporary
    - docker image prune -a --force --filter="label=temporary"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:test
    - *docker-login
    - docker push $CI_REGISTRY_IMAGE:test
    #- docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA || true
    #- docker rmi $CI_REGISTRY_IMAGE:test || true

#сборка основного образа
build-prod:
  stage: build
  rules:
    - *readme-no-commit
    - *docker-compose-no-commit
    - *master-commit
    #- *merge-with-master
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --build-arg VERSION=$CI_COMMIT_SHORT_SHA .
    # удаляем промежуточный образ с меткой temporary
    - docker image prune -a --force --filter="label=temporary"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    - *docker-login
    - docker push $CI_REGISTRY_IMAGE:latest

#развёртывание тестовой сборки (пока что это будет GCM)
deploy-test:
  stage: deploy
  rules:
    - *readme-no-commit
    - *docker-compose-no-commit
    - *dev-test-commit
    - *master-commit
    #- *merge-with-branch-testing
  script:
    #тест ГЦМ
    - "curl -X POST --fail -F token=$GCM_TRIGGER -F ref=master http://gitlab.cloud.gcm/api/v4/projects/726/trigger/pipeline"

#развёртывание основной сборки (все регионы)
deploy-prod:
  stage: deploy
  rules:
    - *readme-no-commit
    - *docker-compose-no-commit
    - *master-commit
    #- *merge-with-master
  script:
    - "curl -X POST --fail -F token=$RCMSPB_GCM_TRIGGER -F ref=master http://gitlab.cloud.gcm/api/v4/projects/748/trigger/pipeline"
  environment: production
