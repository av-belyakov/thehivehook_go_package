stages:
  - build
  - push
  - deploy

default:
  tags:
    - thehivehook_go

.docker-login-script: &docker-login
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

build-job:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --build-arg VERSION=$CI_COMMIT_SHORT_SHA .
    # удаляем промежуточный образ с меткой temporary
    - docker image prune -a --force --filter="label=temporary"
    - *docker-login
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

push-latest:
  stage: push
  only:
    - master
  script:
    # поскольку у нас нет гарантии, что это задание будет выполнено тем же пользователем, который
    # создавал изображение на предыдущем шаге, мы повторно загружаем его локально.
    - *docker-login
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    # ставим тег "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

deploy-prod:
  stage: deploy
  only:
    - master
  script:
    - "curl -X POST --fail -F token=$CI_GCM_THEHIVEHOOK_GO_CONTAINER -F ref=master http://gitlab.cloud.gcm/api/v4/projects/726/trigger/pipeline"
  environment: production
